//
// This file is to be applied to every subproject.
//

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: 'org.kordamp.gradle.stats'

apply from: "${rootDir}/gradle/versioning.gradle"
apply from: "${rootDir}/gradle/opentcs-baseline.gradle"
apply from: "${rootDir}/gradle/license-headers.gradle"

group = 'de.fraunhofer.iml.opentcs.example'

sourceCompatibility = '1.8'
archivesBaseName = name.toLowerCase()

ext {
  // Attributes for the AsciiDoc documentation to include code from source files
  javaSrcDir = sourceSets.main.java.srcDirs[0]
  javaClassesDir = sourceSets.main.output.classesDirs
  testSrcDir = sourceSets.test.java.srcDirs[0]
}
  
repositories {
  jcenter()
}

dependencies {
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
  compileOnly group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21', classifier: 'javadoc'

  compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
  compile group: 'com.google.guava', name: 'guava', version: '19.0'
  compileOnly group: 'com.google.guava', name: 'guava', version: '19.0', classifier: 'sources'

  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
  testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.21'
}

compileJava {
  options.compilerArgs << "-Xlint:all"
  options.compilerArgs << "-Xlint:-serial"
}

compileTestJava {
  options.compilerArgs << "-Xlint:all"
  options.compilerArgs << "-Xlint:-serial"
}

checkstyle {
  toolVersion = '8.16'
  configFile = rootProject.file("config/checkstyle/checkstyle.xml")
  configProperties = [suppressions_file:rootDir.absolutePath + "/config/checkstyle/suppressions.xml"]
  showViolations = false
}

project.afterEvaluate { project ->
  project.tasks.withType(Checkstyle) {
    reports {
      html.stylesheet resources.text.fromFile(rootProject.file("config/checkstyle/checkstyle-noframes-severity-sorted.xsl"))
    }
  }
}

task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
  classifier = 'sources'
  from sourceSets.main.allSource
}

test {
  ignoreFailures = true
  systemProperties.put("java.awt.headless", "true")
}

artifacts {
  archives jar
  archives sourcesJar
}

configure(install.repositories.mavenInstaller) {
  pom.project {
    groupId = project.group
    artifactId = project.name.toLowerCase()
    version = project.version
  }
}

task createFolders(description: 'Creates the source folders if they do not exist.') doLast {
  sourceSets*.allSource*.srcDirs*.each { File srcDir ->
    if (!srcDir.isDirectory()) {
      println "Creating source folder: ${srcDir}"
      srcDir.mkdirs()
    }
  }
}
